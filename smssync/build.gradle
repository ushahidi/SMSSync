/*
 * Copyright (c) 2010 - 2015 Ushahidi Inc
 * All rights reserved
 * Contact: team@ushahidi.com
 * Website: http://www.ushahidi.com
 * GNU Lesser General Public License Usage
 * This file may be used under the terms of the GNU Lesser
 * General Public License version 3 as published by the Free Software
 * Foundation and appearing in the file LICENSE.LGPL included in the
 * packaging of this file. Please review the following information to
 * ensure the GNU Lesser General Public License version 3 requirements
 * will be met: http://www.gnu.org/licenses/lgpl.html.
 *
 * If you have questions regarding the use of this file, please contact
 * Ushahidi developers at team@ushahidi.com.
 */

import org.ajoberstar.gradle.git.release.opinion.Strategies
import org.ajoberstar.grgit.Grgit

apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'org.ajoberstar.release-opinion'
apply plugin: 'com.github.triplet.play'

def isTravis = "true".equals(System.getenv("TRAVIS"))

def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

def getGooglePlaystoreServiceAccountEmail() {
    return project.hasProperty('gPlaystoreServiceAccountEmailAddress') ?
            gPlaystoreServiceAccountEmailAddress : ''
}

def getGooglePlaystoreServicepk12File() {
    // Set to home directory if property not set because play plugin doesn't allow empty or null
    // value for the pk file
    return project.hasProperty('gPlaystorePKFile') ? gPlaystorePKFile : '~/'
}

def trackProperty() {
    return project.hasProperty('uploadTrack') ? uploadTrack : 'alpha'
}

def readWhatsNewFile(filename) {
    File file = new File('smssync/src/main/play/en-US/' + filename);
    return file.exists() ? file.text + '\n\n' :
            new File('smssync/src/main/play/en-US/whatsnew').text;
}

def globalConfiguration = rootProject.extensions.getByName("ext")

android {
    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    signingConfigs {

        releaseSign
    }

    buildTypes {

        release {
            if (project.hasProperty('googleAnalyticsCode')) {
                resValue "string", "ga_trackingId", "${googleAnalyticsCode}"
            } else {
                resValue "string", "ga_trackingId", ""
            }

            minifyEnabled false
            shrinkResources false
            // Library specific proguard files
            proguardFile 'proguard-gson.pro'
            proguardFile 'proguard-square-okio.pro'
            proguardFile 'proguard-square-okhttp.pro'
            proguardFile 'proguard-square-otto.pro'
            proguardFile 'proguard-google-analytics.pro'

            // Default proguard files
            proguardFile 'proguard-project.pro'
            proguardFile getDefaultProguardFile('proguard-android.txt')
            signingConfig signingConfigs.releaseSign
        }

        debug {
            if (project.hasProperty('googleAnalyticsCode')) {
                resValue "string", "ga_trackingId", "${googleAnalyticsCode}"
            } else {
                resValue "string", "ga_trackingId", ""
            }
            applicationIdSuffix ".debug"
            versionNameSuffix "-DEBUG"
            debuggable true
        }
    }

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode globalConfiguration.getAt("androidVersionCode")
        testInstrumentationRunner globalConfiguration.getAt("testInstrumentationRunner")
        def publicKey = project.hasProperty('inAppPurchasePubKey') ? inAppPurchasePubKey :
                'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAogSL6I/lnQ0bVEEwttOu8CmrZvZzkTrFcsLiHjeb6Sw01+i8nTNW70QsTe1U2Hg4ELv3Hrm0Vt5gyQL2r9V4h8IWhbGNlHPAWJFP/dUgbwYFBUsJ4SSOS4N2kN9FER0mWwZ90boulNaHd8g8AQkwaBAzsNL5w+uij4hfZ9AsAO/rdhqXkAQeV6ykVgW0Q9qoWTcPg0ly7lOtxMmnvPFnrPXTt/SyoZEmNE5j02sh0eDdyGR5hEc16ZcMM2tvndRomfi+aYeswguZf3V+J+fAcXiBiX4Q81356g+nFJfMUxu8D7o0ZDPSS2u4FW79QhRjWzijJ/4EIw4TQ1jtKBapgwIDAQAB';
        if (!project.hasProperty('inAppPurchasePubKey')) {
            println 'Missing inAppPurchasePubKey. Using the default from SMSsync project'
        }

        def twitterConsumerKey = project.hasProperty('twitterConsumerKey') ? twitterConsumerKey :
                'consumer_key'
        def twitterConsumerSecret = project.hasProperty('twitterSecretKey') ? twitterSecretKey :
                'consumer_secret'
        if (!project.hasProperty('twitterConsumerKey')) {
            println 'Missing Twitter Consumer Key. Using a dummy key for now'
        }

        if (!project.hasProperty('twitterSecretKey')) {
            println 'Missing Twitter Secret Key. Using a dummy secret for now'
        }
        buildConfigField "String", "PUBLIC_LICENSE_KEY", '"' + publicKey + '"'
        buildConfigField "String", "TWITTER_CONSUMER_KEY", '"' + twitterConsumerKey + '"'
        buildConfigField "String", "TWITTER_CONSUMER_SECRET", '"' + twitterConsumerSecret + '"'

        testApplicationId "org.addhen.smssync.tests"
        applicationId "org.addhen.smssync"
        buildConfigField "String", "GOOGLE_FORM_URL",
                project.hasProperty('googleDocsForm') ? googleDocsForm : "\"\""
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def newName = outputFile.name.replace(outputFile.name,
                        "smssync-${variant.name}-v" + defaultConfig.versionName + "-" +
                                variant.buildType.name.toUpperCase() +
                                ".apk");

                output.outputFile = file("$project.buildDir/apk/" + newName);
                if (output.zipAlign) {
                    output.zipAlign.outputFile =
                            file("$project.buildDir/apk/" + newName.replace("-unaligned", ""));
                }
            }
        }
    }

    productFlavors {

        withAnalytics {
            applicationId 'org.addhen.smssync'
        }

        noAnalytics {
            applicationId 'org.addhen.smssync'
        }

        internal {
            applicationId 'org.addhen.smssync.internal'
        }
    }

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !isTravis
        incremental = true;
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

retrolambda {
    jvmArgs '-noverify'
}

release {
    grgit = Grgit.open(dir: '.')

    def tagMessage = readWhatsNewFile("whatsnew-${trackProperty()}");

    versionStrategy Strategies.PRE_RELEASE_ALPHA_BETA

    android.defaultConfig.versionName = project.version.toString()

    tagStrategy {
        generateMessage = { version -> "\n\nRelease of $version.version\n$tagMessage" }
    }
}

play {
    serviceAccountEmail = getGooglePlaystoreServiceAccountEmail()
    pk12File = file(getGooglePlaystoreServicepk12File())
    uploadImages = true
    track = trackProperty()
}

if (project.hasProperty('releaseKeyStore') &&
        project.hasProperty('releaseKeyPassword') &&
        project.hasProperty('releaseKeyStorePassword') &&
        project.hasProperty('releaseKeyAlias')) {
    android.signingConfigs.releaseSign.keyAlias = releaseKeyAlias
    android.signingConfigs.releaseSign.storeFile = file(releaseKeyStore)
    android.signingConfigs.releaseSign.storePassword = releaseKeyStorePassword
    android.signingConfigs.releaseSign.keyPassword = releaseKeyPassword
} else {
    android.signingConfigs.releaseSign.keyAlias ""
    android.signingConfigs.releaseSign.storeFile null
    android.signingConfigs.releaseSign.storePassword ""
    android.signingConfigs.releaseSign.keyPassword ""
}

//tasks.release.dependsOn(['publishApkWithAnalyticsRelease'])

// Build and launch app from command line
task runApp(type: Exec, dependsOn: ['build', 'installWithAnalyticsDebug']) {
    //Linux command to launch the MainActivity when debug app is installed
    commandLine 'adb', 'shell', 'am', 'start', '-n',
            'org.addhen.smssync.debug/org.addhen.smssync.presentation.view.ui.activity.MainActivity'
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    def appDependencies = rootProject.ext.appDependencies
    def appTestDependencies = rootProject.ext.appTestDependencies
    annotationProcessor appDependencies.daggerCompiler // Needed for source code generation
    annotationProcessor appDependencies.butterKnifeComplier
    compile appDependencies.raiburari
    compile appDependencies.cupboard
    compile appDependencies.butterKnife
    compile appDependencies.wakeful
    compile appDependencies.okHttp
    compile appDependencies.twitter4jCore
    compile appDependencies.nineOldAndroids
    compile appDependencies.loggingInterceptor
    compile appDependencies.bottomSheet
    compile appDependencies.zXingQRCode
    compile appDependencies.supportPreference
    compile appDependencies.timber
    // Firebase(analytics, crash report)
    compile appDependencies.firebaseCore
    compile appDependencies.firebaseCrash
    provided appDependencies.javaxAnnotation // Needed to resolve compilation errors

    // Test depedencies
    testCompile appTestDependencies.junit
    testCompile appTestDependencies.mockito
    testCompile appTestDependencies.mockWebServer
    testAnnotationProcessor appDependencies.daggerCompiler

    androidTestCompile appTestDependencies.mockito
    androidTestCompile appTestDependencies.dexmaker
    androidTestCompile appTestDependencies.dexmakerMockito
    androidTestAnnotationProcessor appDependencies.daggerCompiler
}

// MUST BE AT THE BOTTOM
apply plugin: 'com.google.gms.google-services'
